{"version":3,"file":"static/js/417.1c3a76e5.chunk.js","mappings":"0OAEaA,E,QAAOC,GAAAA,GAAH,w0B,SCoCjB,EAjCa,WACX,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA4BE,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KAQA,OANAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAgBN,EAAS,WACtBO,MAAK,SAAAC,GAAO,OAAIJ,EAAUI,EAAQC,KAAtB,IACZC,MAAMC,QAAQC,IAClB,GAAE,CAACZ,KAGF,+BACE,SAACF,EAAD,UACGK,EAAOU,KAAI,SAAAC,GAAK,OACf,0BACIA,EAAMC,cAGN,gBACEC,IAAG,yCAAoCF,EAAMC,cAC7CE,IAAKH,EAAMI,KACXC,MAAM,SALR,wCAQF,uBAAIL,EAAMI,QACV,uBAAIJ,EAAMM,cAXHN,EAAMO,QADA,OAkBxB,C,mJClCKC,EAAW,gCACXC,EACJ,sNAEK,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,iGACCC,EAAc,CAClBC,OAAQ,uBAEJC,EAAU,CACdC,OAAQ,CACNC,SAAU,QACVC,eAAe,GAEjBC,QAAS,CACPC,cAAc,UAAD,OAAYT,GACzB,eAAgB,qBAGdU,EAdD,UAcUX,GAdV,OAcqBG,EAAYC,QAdjC,SAekBQ,EAAAA,EAAAA,IAAUD,EAAKN,GAfjC,cAeCQ,EAfD,yBAiBEA,EAASC,KAAKC,SAjBhB,kEAoBA,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,+GAA8BC,EAA9B,+BAA4C,GAC3Cd,EAAc,CAClBe,OAAQ,gBAEJb,EAAU,CACdC,OAAQ,CACNa,MAAOF,EACPV,SAAU,QACVC,eAAe,GAEjBC,QAAS,CACPC,cAAc,UAAD,OAAYT,GACzB,eAAgB,qBAGdU,EAfD,UAeUX,GAfV,OAeqBG,EAAYe,QAfjC,SAgBkBN,EAAAA,EAAAA,IAAUD,EAAKN,GAhBjC,cAgBCQ,EAhBD,yBAkBEA,EAASC,KAAKC,SAlBhB,mEAqBA,SAAe/B,EAAtB,+CAAO,OAAP,oBAAO,WAA+BN,GAA/B,kGAAwC0C,EAAxC,+BAA+C,UAC9CC,EAAkB,CACtBC,QAAQ,SAAD,OAAW5C,GAClBQ,QAAQ,SAAD,OAAWR,EAAX,YACP6C,QAAQ,SAAD,OAAW7C,EAAX,YACP8C,OAAO,SAAD,OAAW9C,EAAX,YAEF2B,EAAU,CACdC,OAAQ,CACNC,SAAU,QACVC,eAAe,GAEjBC,QAAS,CACPC,cAAc,UAAD,OAAYT,GACzB,eAAgB,qBAGdU,EAjBD,UAiBUX,GAjBV,OAiBqBqB,EAAgBD,IAjBrC,SAkBkBR,EAAAA,EAAAA,IAAUD,EAAKN,GAlBjC,cAkBCQ,EAlBD,yBAoBEA,EAASC,MApBX,mE","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","services/movieSearchAPI.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 15px;\n  align-items: center;\n  justify-content: center;\n  padding: 15px;\n\n  & li {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n    gap: 5px;\n    width: 200px;\n    padding: 5px;\n    border: solid 1px black;\n    border-radius: 5px;\n    & img {\n      margin-right: auto;\n      margin-left: auto;\n    }\n    & span {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      width: 100px;\n      height: 150px;\n      border: solid 0.5px black;\n      background-color: grey;\n    }\n    & p {\n      padding: 5px;\n      text-align: center;\n      font-size: 16px;\n      height: 60px;\n    }\n    & b {\n      text-align: center;\n      font-size: 16px;\n    }\n  }\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieDetails } from 'services/movieSearchAPI';\nimport { List } from './Cast.styled';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [actors, setActors] = useState([]);\n\n  useEffect(() => {\n    getMovieDetails(movieId, 'credits')\n      .then(credits => setActors(credits.cast))\n      .catch(console.log);\n  }, [movieId]);\n\n  return (\n    <>\n      <List>\n        {actors.map(actor => (\n          <li key={actor.cast_id}>\n            {!actor.profile_path ? (\n              <span>No photo</span>\n            ) : (\n              <img\n                src={`https://image.tmdb.org/t/p/w500${actor.profile_path}`}\n                alt={actor.name}\n                width=\"100\"\n              />\n            )}\n            <b>{actor.name}</b>\n            <p>{actor.character}</p>\n          </li>\n        ))}\n      </List>\n    </>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst TOKEN =\n  'eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJiYmVhZjQ1OWJkYzM0ZDczZDRiNTMwMzBhYWQ5NDE3MSIsInN1YiI6IjYzZGJmOWFjMTA5MjMwMDBmMDRkYTgyNCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.uC-Z-fFxmbW7fDBPbdS7Pqx5UhdM-U37Tv5InKJMlYc';\n\nexport async function getTrendingMovies() {\n  const typeRequest = {\n    trends: 'trending/movie/week',\n  };\n  const options = {\n    params: {\n      language: 'en-US',\n      include_adult: false,\n    },\n    headers: {\n      Authorization: `Bearer ${TOKEN}`,\n      'Content-Type': 'application/json',\n    },\n  };\n  const url = `${BASE_URL}${typeRequest.trends}`;\n  const response = await axios.get(url, options);\n\n  return response.data.results;\n}\n\nexport async function getSearchMovie(searchQuery = '') {\n  const typeRequest = {\n    search: 'search/movie',\n  };\n  const options = {\n    params: {\n      query: searchQuery,\n      language: 'en-US',\n      include_adult: false,\n    },\n    headers: {\n      Authorization: `Bearer ${TOKEN}`,\n      'Content-Type': 'application/json',\n    },\n  };\n  const url = `${BASE_URL}${typeRequest.search}`;\n  const response = await axios.get(url, options);\n\n  return response.data.results;\n}\n\nexport async function getMovieDetails(movieId, type = 'details') {\n  const typeRequestById = {\n    details: `movie/${movieId}`,\n    credits: `movie/${movieId}/credits`,\n    reviews: `movie/${movieId}/reviews`,\n    videos: `movie/${movieId}/videos`,\n  };\n  const options = {\n    params: {\n      language: 'en-US',\n      include_adult: false,\n    },\n    headers: {\n      Authorization: `Bearer ${TOKEN}`,\n      'Content-Type': 'application/json',\n    },\n  };\n  const url = `${BASE_URL}${typeRequestById[type]}`;\n  const response = await axios.get(url, options);\n\n  return response.data;\n}\n"],"names":["List","styled","movieId","useParams","useState","actors","setActors","useEffect","getMovieDetails","then","credits","cast","catch","console","log","map","actor","profile_path","src","alt","name","width","character","cast_id","BASE_URL","TOKEN","getTrendingMovies","typeRequest","trends","options","params","language","include_adult","headers","Authorization","url","axios","response","data","results","getSearchMovie","searchQuery","search","query","type","typeRequestById","details","reviews","videos"],"sourceRoot":""}