{"version":3,"file":"static/js/415.82d04b59.chunk.js","mappings":"qPAEaA,EAAOC,EAAAA,GAAAA,GAAH,6KAUJC,EAAOD,EAAAA,GAAAA,GAAH,w2BAyCJE,EAAeF,EAAAA,GAAAA,EAAH,uG,kGCZzB,EArCkB,SAAC,GAAgB,IAAdG,EAAa,EAAbA,OACbC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,SAAC,KAAD,UACGF,EAAOG,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,YAAd,OACV,SAAC,KAAD,WACE,SAAC,KAAD,CAAMC,GAAE,kBAAaH,GAAMI,MAAO,CAAEC,KAAMR,GAA1C,UACE,2BACGK,GACC,gBACEI,IAAG,yCAAoCJ,GACvCK,IAAG,iBAAYN,GACfO,MAAM,QACNC,OAAO,WAGT,yCAEF,uBAAIR,UAbCD,EADD,KAqBjB,C,wGCzBKU,EAAQjB,EAAAA,GAAAA,GAAH,uEAoBX,UAfa,WACX,OAA4CkB,EAAAA,EAAAA,UAAS,IAArD,eAAOC,EAAP,KAAuBC,EAAvB,KAMA,OAJAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,MAAoBC,KAAKH,GAAmBI,MAAMC,QAAQC,IAC3D,GAAE,KAGD,iCACE,SAACT,EAAD,8BACA,SAAC,IAAD,CAAWd,OAAQgB,MAGxB,C,mJCrBKQ,EAAW,gCACXC,EACJ,sNAEK,SAAeN,IAAtB,4CAAO,OAAP,oBAAO,iGACCO,EAAc,CAClBC,OAAQ,uBAEJC,EAAU,CACdC,OAAQ,CACNC,SAAU,QACVC,eAAe,GAEjBC,QAAS,CACPC,cAAc,UAAD,OAAYR,GACzB,eAAgB,qBAGdS,EAdD,UAcUV,GAdV,OAcqBE,EAAYC,QAdjC,SAekBQ,EAAAA,EAAAA,IAAUD,EAAKN,GAfjC,cAeCQ,EAfD,yBAiBEA,EAASC,KAAKC,SAjBhB,kEAoBA,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,+GAA8BC,EAA9B,+BAA4C,GAC3Cd,EAAc,CAClBe,OAAQ,gBAEJb,EAAU,CACdC,OAAQ,CACNa,MAAOF,EACPV,SAAU,QACVC,eAAe,GAEjBC,QAAS,CACPC,cAAc,UAAD,OAAYR,GACzB,eAAgB,qBAGdS,EAfD,UAeUV,GAfV,OAeqBE,EAAYe,QAfjC,SAgBkBN,EAAAA,EAAAA,IAAUD,EAAKN,GAhBjC,cAgBCQ,EAhBD,yBAkBEA,EAASC,KAAKC,SAlBhB,mEAqBA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,kGAAwCC,EAAxC,+BAA+C,UAC9CC,EAAkB,CACtBC,QAAQ,SAAD,OAAWH,GAClBI,QAAQ,SAAD,OAAWJ,EAAX,YACPK,QAAQ,SAAD,OAAWL,EAAX,YACPM,OAAO,SAAD,OAAWN,EAAX,YAEFhB,EAAU,CACdC,OAAQ,CACNC,SAAU,QACVC,eAAe,GAEjBC,QAAS,CACPC,cAAc,UAAD,OAAYR,GACzB,eAAgB,qBAGdS,EAjBD,UAiBUV,GAjBV,OAiBqBsB,EAAgBD,IAjBrC,SAkBkBV,EAAAA,EAAAA,IAAUD,EAAKN,GAlBjC,cAkBCQ,EAlBD,yBAoBEA,EAASC,MApBX,mE","sources":["components/MovieList/MovieList.styled.js","components/MovieList/MovieList.jsx","pages/Home.jsx","services/movieSearchAPI.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: center;\n  gap: 15px;\n  padding: 0 0 20px 0;\n  margin-top: 10px;\n`;\n\nexport const Item = styled.li`\n  overflow: hidden;\n  border: solid 1px black;\n  :hover {\n    transform: scale(1.03);\n    box-shadow: 0 1px 4px #0000004d, -23px 0 20px -23px #000c,\n      23px 0 20px -23px #000c, inset 0 0 40px #0000001a;\n  }\n  & a {\n    color: #000000;\n    & div {\n      text-align: center;\n      width: 250px;\n      height: 460px;\n      & span {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        height: 376px;\n        border-bottom: solid 1px black;\n        font-size: 30px;\n      }\n      & img {\n        width: 250px;\n        margin-bottom: 5px;\n        border-bottom: solid 1px black;\n      }\n    }\n    & b {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      padding: 10px;\n      font-size: 16px;\n    }\n  }\n  &:hover > a {\n    color: red;\n  }\n`;\n\nexport const Notification = styled.b`\n  display: block;\n  margin: 20px auto 0;\n  font-size: 20px;\n  width: 200px;\n`;\n","import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { Item, List } from './MovieList.styled';\n\nconst MovieList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <List>\n      {movies.map(({ id, title, poster_path }) => (\n        <Item key={id}>\n          <Link to={`/movies/${id}`} state={{ from: location }}>\n            <div>\n              {poster_path ? (\n                <img\n                  src={`https://image.tmdb.org/t/p/w500${poster_path}`}\n                  alt={`Poster ${title}`}\n                  width=\"250px\"\n                  height=\"375px\"\n                />\n              ) : (\n                <span>No poster</span>\n              )}\n              <b>{title}</b>\n            </div>\n          </Link>\n        </Item>\n      ))}\n    </List>\n  );\n};\n\nMovieList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default MovieList;\n","import MovieList from 'components/MovieList';\nimport { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { getTrendingMovies } from 'services/movieSearchAPI';\n\nconst Title = styled.h1`\n  text-align: center;\n  margin-bottom: 20px;\n`;\n\nconst Home = () => {\n  const [trendingMovies, setTrendingMovies] = useState([]);\n\n  useEffect(() => {\n    getTrendingMovies().then(setTrendingMovies).catch(console.log);\n  }, []);\n\n  return (\n    <>\n      <Title>Trending today</Title>\n      <MovieList movies={trendingMovies} />\n    </>\n  );\n};\n\nexport default Home;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst TOKEN =\n  'eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJiYmVhZjQ1OWJkYzM0ZDczZDRiNTMwMzBhYWQ5NDE3MSIsInN1YiI6IjYzZGJmOWFjMTA5MjMwMDBmMDRkYTgyNCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.uC-Z-fFxmbW7fDBPbdS7Pqx5UhdM-U37Tv5InKJMlYc';\n\nexport async function getTrendingMovies() {\n  const typeRequest = {\n    trends: 'trending/movie/week',\n  };\n  const options = {\n    params: {\n      language: 'en-US',\n      include_adult: false,\n    },\n    headers: {\n      Authorization: `Bearer ${TOKEN}`,\n      'Content-Type': 'application/json',\n    },\n  };\n  const url = `${BASE_URL}${typeRequest.trends}`;\n  const response = await axios.get(url, options);\n\n  return response.data.results;\n}\n\nexport async function getSearchMovie(searchQuery = '') {\n  const typeRequest = {\n    search: 'search/movie',\n  };\n  const options = {\n    params: {\n      query: searchQuery,\n      language: 'en-US',\n      include_adult: false,\n    },\n    headers: {\n      Authorization: `Bearer ${TOKEN}`,\n      'Content-Type': 'application/json',\n    },\n  };\n  const url = `${BASE_URL}${typeRequest.search}`;\n  const response = await axios.get(url, options);\n\n  return response.data.results;\n}\n\nexport async function getMovieDetails(movieId, type = 'details') {\n  const typeRequestById = {\n    details: `movie/${movieId}`,\n    credits: `movie/${movieId}/credits`,\n    reviews: `movie/${movieId}/reviews`,\n    videos: `movie/${movieId}/videos`,\n  };\n  const options = {\n    params: {\n      language: 'en-US',\n      include_adult: false,\n    },\n    headers: {\n      Authorization: `Bearer ${TOKEN}`,\n      'Content-Type': 'application/json',\n    },\n  };\n  const url = `${BASE_URL}${typeRequestById[type]}`;\n  const response = await axios.get(url, options);\n\n  return response.data;\n}\n"],"names":["List","styled","Item","Notification","movies","location","useLocation","map","id","title","poster_path","to","state","from","src","alt","width","height","Title","useState","trendingMovies","setTrendingMovies","useEffect","getTrendingMovies","then","catch","console","log","BASE_URL","TOKEN","typeRequest","trends","options","params","language","include_adult","headers","Authorization","url","axios","response","data","results","getSearchMovie","searchQuery","search","query","getMovieDetails","movieId","type","typeRequestById","details","credits","reviews","videos"],"sourceRoot":""}